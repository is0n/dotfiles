(defwindow vbar
  :monitor 0
  :geometry (geometry
    :x "6px"
    :width "35px"
    :height "98%"
    :anchor "left center")
  :stacking "fg"
  :windowtype "dock"
  :reserve (struts :side "left" :distance "42px")
  (bar))

;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defwidget bar []
  (box :class "bar"
       :orientation "v"
    (top)
    (center)
    (btm)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defwidget top []
  (box :valign "start" :orientation "v" :spacing 5 :space-evenly false
    (eventbox :onhover "scripts/profile open &"
      (button :class "profile-btn" :onclick "scripts/profile toggle &" ""))
    (powerbuttons)))

(defwidget powerbuttons []
  (eventbox :onhover "eww -c . update showbuttons=true"
            :onhoverlost "eww -c . update showbuttons=false"
    (box :space-evenly false :spacing 3 :orientation "v"
      (button :class "logout"   :tooltip "Logout"   :onclick "killall $(wmctrl -m | grep Name | cut -d ' ' -f2)" "﫼")
      (revealer :transition "slidedown"
                :reveal showbuttons
                :duration "500ms"
        (box :orientation "v"
          (button :class "sleep"    :tooltip "Sleep"    :onclick "~/.local/bin/lock suspend &" "")
          (button :class "lock"     :tooltip "Lock"     :onclick "~/.local/bin/lock &" "")
          (button :class "reboot"   :tooltip "Reboot"   :onclick "systemctl reboot" "")
          (button :class "shutdown" :tooltip "Shutdown" :onclick "systemctl poweroff" ""))))))

(defvar showbuttons false)

;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defwidget center []
  (box :valign "center"
    (literal :content ws)))

(deflisten ws "scripts/workspaces")

;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defwidget btm []
  (box :orientation "v"
       :space-evenly false
       :valign "end"
       :spacing 10
    (metric :reveal showcpu
            :class "cpu"
            :value cpu
            :tooltip "${cpu}%"
            :onchange ""
            :icon "")
    (metric :reveal showram
            :class "ram"
            :value ram
            :tooltip "${ram}%"
            :onchange ""
            :icon "")
    (metric :reveal showvol
            :class "vol"
            :value vol
            :tooltip "${vol}%"
            :onchange "amixer -D pulse sset Master {}%"
            :icon volIcon)
    (metric :reveal showbright
            :class "bright"
            :value bright
            :tooltip "${bright}%"
            :onchange ""
            :icon "")
    (eventbox :onhover "scripts/cal open &"
      (button :class "time" :onclick "scripts/cal toggle &" time))))

(defwidget metric [reveal class value tooltip onchange icon]
  (eventbox :onhover "eww -c . update show${class}=true"
            :onhoverlost "eww -c . update show${class}=false"
    (box :space-evenly false :spacing 3 :orientation "v"
      (revealer :transition "slideup"
                :reveal reveal
                :duration "500ms"
        (scale :min 0
               :max 100
               :orientation "v"
               :flipped true
               :class class
               :value value
               :tooltip tooltip
               :onchange onchange))
      (label :class "icon" :text icon))))

(defvar showcpu    false)
(defvar showram    false)
(defvar showmic    false)
(defvar showvol    false)
(defvar showbright false)

(defpoll cpu     :interval "10s" "scripts/getcpu")
(defpoll ram     :interval "10s" "scripts/getram")
(defpoll mic     :interval "10s" "scripts/getmic")
(defpoll vol     :interval "2s"  "scripts/volume value")
(defpoll bright  :interval "2s"  "scripts/getbright")
(defpoll volIcon :interval "2s"  "scripts/volume icon")
(defpoll time    :interval "1s"  "date '+%H%n%M'")

;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defwindow profile
  :monitor 0
  :geometry (geometry
    :x "53px"
    :y "1%"
    :anchor "top left")
  :stacking "fg"
  :windowtype "dock"
  (profile))

;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defwidget profile []
  (box :class "profile"
       :space-evenly false
       :spacing 20
    (box :orientation "v"
         :space-evenly false
      (pfp)
      (launcher))
    (box :class "line")
    (box :orientation "v"
         :space-evenly false
      (music)
      (player))))

(defwidget pfp []
  (box :class "pfp"
       :valign "center"
       :style "background-image: url('${pfp}');"))

(deflisten pfp "tail -F ~/.config/eww/pfp 2>/dev/null")

;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defwidget launcher []
  (box :class "btn" :spacing 10
    (button :class "firefox"   :onclick "firefox -P default-release & disown" "")
    (button :class "dashboard" :onclick "~/.local/bin/dashboard toggle" "舘")
    (button :class "discord"   :onclick "discord & disown" "ﭮ")))

;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defwidget music []
  (box :orientation "h" :space-evenly false :spacing 20
    (box :class "art" :style "background-image: url('${cover}');" art)
    (box :orientation "v" :space-evenly true :class "info"
      (box :space-evenly false :class "title"
        (box :class "icon" "")
        (label :text ": ${title}"
               :class "text"
               :limit-width 20
               :halign "start"))
      (box :space-evenly false :class "artist"
        (box :class "icon" "")
        (label :text ": ${artist}"
               :class "text"
               :limit-width 20
               :halign "start"))
      (box :space-evenly false :class "album"
        (box :class "icon" "")
        (label :text ": ${album}"
               :class "text"
               :limit-width 20
               :halign "start")))))

(defwidget player []
  (box :class "btn" :spacing 10
    (button :class "prev"   :onclick "spt playback -p &" "玲")
    (button :class "toggle" :onclick "spt playback -t &" "懶")
    (button :class "next"   :onclick "spt playback -n &" "怜")))

(defpoll cover  :interval "5s"  "scripts/getmusic art")
(defpoll title  :interval "5s"  "scripts/getmusic title")
(defpoll artist :interval "5s"  "scripts/getmusic artist")
(defpoll album  :interval "5s"  "scripts/getmusic album")
(defpoll art    :interval "5s"  "scripts/getart")

;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defwidget cal []
  (box :class "cal-out"
    (box :class "cal-in"
      (calendar :class "cal"
                :day calday
                :year calyr))))

(defwindow cal
	:geometry (geometry
    :x "53px"
		:y "-1%"
    :anchor "bottom left")
  (cal))

(defpoll calday :interval "24h" "date '+%d'")
(defpoll calyr  :interval "24h" "date '+%Y'")
